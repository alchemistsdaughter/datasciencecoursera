library()
library(swirl)
swirl()
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x <- c(44, NA, 5, NA)
x*3
y <- rnom(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
bye()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6, ))
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class'')
sapply(flags, class')
sapply(flags, class)
exit
sapply(flags, class)
sapply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
swirl()
library(swirl)
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,-(r_arch:country)
select(cran,-(r_arch:country))
select(cran,country:r_arch))
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran, -(X:size)
select(cran, -(X:size))
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, package == "swirl", country == "US")
filter(cran, R.version == "3.1.1", country == "US")
filter(cran, r.version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, , country == "IN", r_version <= "3.0.2")
filter(cran, , country == "IN", r_version <= 3.0.2)
filter(cran, country == "IN", r_version <= "3.0.2"")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
avg_bytes
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package)
summarise(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()\
submit()
setwd("~/GitHub/datasciencecoursera/GettingandCleaningData/practicedatasets/courseproject/UCI HAR Dataset")
setwd("~/GitHub/datasciencecoursera/GettingandCleaningData/practicedatasets")
if(!file.exists('./UCI HAR Dataset.zip')) {
download.file(filename, './UCI HAR Dataset.zip', mode = "wb")
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
filename = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists('./UCI HAR Dataset.zip')) {
download.file(filename, './UCI HAR Dataset.zip', mode = "wb")
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
setwd("~/GitHub/datasciencecoursera/GettingandCleaningData/practicedatasets/courseproject")
## download all necessary libraries
library(data.table)
library(dplyr)
## create directory if needed, download file, unzip file
filename = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists('./UCI HAR Dataset.zip')) {
download.file(filename, './UCI HAR Dataset.zip', mode = "wb")
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
## read the activity, subject, and feature data sets
activityTest <- read.table("./UCI HAR Dataset/test/y_test.txt", header = FALSE)
activityTrain <- read.table("./UCI HAR Dataset/train/y_train.txt", header = FALSE)
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt", header = FALSE)
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt", header = FALSE)
featuresTest <- read.table("./UCI HAR Dataset/test/X_test.txt", header = FALSE)
featuresTrain <- read.table("./UCI HAR Dataset/train/x_train.txt", header = FALSE)
str(activityTest)
str(activityTrain)
str(subjectTest)
str(subjectTrain)
str(featuresTest)
str(featuresTrain)
## download all necessary libraries
library(data.table)
library(dplyr)
## create directory if needed, download file, unzip file
filename = "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists('./UCI HAR Dataset.zip')) {
download.file(filename, './UCI HAR Dataset.zip', mode = "wb")
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
## read the activity, subject, and feature data sets
activityTest <- read.table("./UCI HAR Dataset/test/y_test.txt", header = FALSE)
activityTrain <- read.table("./UCI HAR Dataset/train/y_train.txt", header = FALSE)
subjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt", header = FALSE)
subjectTrain <- read.table("./UCI HAR Dataset/train/subject_train.txt", header = FALSE)
featuresTest <- read.table("./UCI HAR Dataset/test/X_test.txt", header = FALSE)
featuresTrain <- read.table("./UCI HAR Dataset/train/x_train.txt", header = FALSE)
## merge test and training data
comboActivity <- rbind(activityTest, activityTrain)
comboSubject <- rbind(subjectTest, subjectTrain)
comboFeatures <- rbind(featuresTest, featuresTrain)
str(comboSubject)
names(comboSubject)
## Update Names
names(comboActivity) <- c("activity")
names(comboSubject) <- c("subject")
names(comboFeatures) <- c("features")
## merge actvity, subject, and feature rows
data.all <- cbind(comboActivity, comboSubject, comboFeatures)
str(data.all)
summarise(data.all)
names(data.all)
data.all <- cbind(comboSubject, comboActivity)
names(data.all)
str(data.all)
names(comboActivity) <- c("activity")
names(comboSubject) <- c("subject")
featuresNames <- read.table("./UCI HAR Dataset/features.txt", header = FALSE)
str(featuresNames)
str(featuresNames$V2)
featuresNames$V2
names(comboActivity) <- c("activity")
names(comboSubject) <- c("subject")
featuresNames <- read.table("./UCI HAR Dataset/features.txt", header = FALSE)
names(comboFeatures) <- featuresNames$V2
data.all <- cbind(comboFeatures, comboSubject, comboActivity)
str(data.all)
subFeaturesNames <- featuresNames$V2[grep("mean|std", featuresNames$V2)]
#subset data.all by subFeaturesNames
data.all <- subset(data.all, select = c(as.character(subFeaturesNames), "subject", "activity"))
str(data.all)
head(data.all$activity)
head(data.all$activity, 30)
activityLabels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = FALSE)
activityLabels
activityLabels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = FALSE, col.names = c("label", "activity"))
activityLabels
str(data.all$activity)
data.all$activity <- activityLabels[data.all$activity, 2]
str(data.all$activity)
data.all$activity
head(data.all)
data.all$activity <- activityLabels[data.all$activity, 1]
data.all$activity
data.all$activity <- activityLabels[data.all$activity, 2]
data.all$activity
names(data)
names(data.all)
names(data.all) <- gsub("^t","time", names(data.all))
names(data.all) <- gsub("Acc","Accelerometer", names(data.all))
names(data.all) <- gsub("Mag","Magnitude", names(data.all))
names(data.all) <- gsub("^f","frequency", names(data.all))
names(data.all) <- gsub("Gyro","Gyroscope", names(data.all))
names(data.all) <- gsub("BodyBody","Body", names(data.all))
names(data.all)
data.all <- subset(data.all, select = c("subject", "activity", as.character(subFeaturesNames)))
## name activities in dataset
#read activity labels
activityLabels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = FALSE, col.names = c("label", "activity"))
# sub out activity label from data.all$activity for activity name from "activityLabels"
data.all$activity <- activityLabels[data.all$activity, 2]
## label the data set with readable variable names
names(data.all) <- gsub("^t","time", names(data.all))
names(data.all) <- gsub("Acc","Accelerometer", names(data.all))
names(data.all) <- gsub("Mag","Magnitude", names(data.all))
names(data.all) <- gsub("^f","frequency", names(data.all))
names(data.all) <- gsub("Gyro","Gyroscope", names(data.all))
names(data.all) <- gsub("BodyBody","Body", names(data.all))
## create new data set with the average of each variable for each activity and
## each subject
names(data.all)
## merge actvity, subject, and feature rows
data.all <- cbind(comboActivity, comboFeatures, comboSubject)
##Extract the measurements on the mean and SD for each measurement
# find all featurenames that reference mean or std
subFeaturesNames <- featuresNames$V2[grep("mean|std", featuresNames$V2)]
#subset data.all by subFeaturesNames
data.all <- subset(data.all, select = c("subject", "activity", as.character(subFeaturesNames)))
## name activities in dataset
#read activity labels
activityLabels <- read.table("./UCI HAR Dataset/activity_labels.txt", header = FALSE, col.names = c("label", "activity"))
# sub out activity label from data.all$activity for activity name from "activityLabels"
data.all$activity <- activityLabels[data.all$activity, 2]
## label the data set with readable variable names
names(data.all) <- gsub("^t","time", names(data.all))
names(data.all) <- gsub("Acc","Accelerometer", names(data.all))
names(data.all) <- gsub("Mag","Magnitude", names(data.all))
names(data.all) <- gsub("^f","frequency", names(data.all))
names(data.all) <- gsub("Gyro","Gyroscope", names(data.all))
names(data.all) <- gsub("BodyBody","Body", names(data.all))
## create new data set with the average of each variable for each activity and
## each subject
names(data.all)
tidyData <- data.all %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(tidyData, "TidyData.txt", row.name = FALSE)
str(tidyData)
tidyData
