23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), colMeans(outcome_col))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), colMeans(data[,outcome_col]))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), colMeans(data[,y]))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), colMeans(data[,outcome_col]))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), colMeans(as.numeric(data[,outcome_col])))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), sort(data))
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall("heart attack", 20)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- data[order(data$State, y),]
## for each state return the hospital with given rank (num)
## answer <- lapply(split(data, data$State), sort(data))
data
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
## answer <- lapply(split(data, data$State), sort(data))
data
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), sort(data$State))
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- lapply(split(data, data$State), sort(data$State))
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}/
?sort
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
class(answer)
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {answer[,num]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[,num]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
data
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[,num]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
data
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[,num]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[num,data$Hospital.Name]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[num,2]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
