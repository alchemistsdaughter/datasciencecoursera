y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[num,2]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnnum) {returnnum[num,2]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
answer
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 1)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
final
# OLD CODE: statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 1)
rankall("heart attack", 20)
head(rankall("heart attack", 2),10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[20,2]})
final
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 2),10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[2,2]})
final
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 2),10)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
final
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 2),10)
head(rankall("heart attack", 20),10)
head(rankall("heart attack", 4),10)
head(rankall("heart attack", 20),5)
head(rankall("heart attack", 15),5)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[15,2]})
final
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 15),5)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
answer
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 15),5)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
data
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 15),5)
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
data
final
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 15),5)
head(rankall("heart attack", 2),5)
getwd()
setwd("W:/Anna.Whitehouse/APM/Ranalysisfiles")
data <- read.csv("EMEAprio_practice.csv", colClasses = "character", na.strings = "Not Available")
setwd("~/GitHub/datasciencecoursera/rprogrammingAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
best("SC", "heart attack")
## returns the hospital with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
#convert death rate to numeric
y <- as.numeric(data[,outcome_col])
data <- data[order(y),] #order by death rate
## subset data based on selected state and outcome - returns data frame with hospital name and death rate
statesub <- subset(data, data$State== state, select = c(2, outcome_col))
#sort by outcome_col lowest to highest
#return lowest
statesub[1,1]
}
## returns a hospital with given rank (num arg) in given state
## mortality rate for heart attack, heart failure, or pneumonia
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
#convert death rate to numeric
y <- as.numeric(data[,outcome_col])
data <- data[order(y, data[,2]),]
## subset data based on selected state and outcome - returns data frame with hospital name and death rate
statesub <- subset(data, data$State== state, select = c(2, outcome_col))
## Return hospital name in that state with the given rank
## 30-day death rate
finalsub <- na.omit(statesub)
if (num == "worst") {
finalsub[nrow(finalsub),1]
}
else if (num == "best") {
finalsub[1,1]
}
else {
finalsub[num,1]
}
}
## Returns a 2-column data frame containing the hospital in each state that has the
## ranking specific in num
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome")
}
## returns the col # based on outcome input
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
}
y <- as.numeric(data[,outcome_col])
## sort data by state and outcome col and get rid of NA
data <- na.omit(data[order(data$State, y),])
## for each state return the hospital with given rank (num)
answer <- split(data, data$State)
final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
## Return hospital name in that state with the given rank
## 30-day death rate
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
# ## Returns a 2-column data frame containing the hospital in each state that has the
# ## ranking specific in num
#
# rankall <- function(outcome, num = "best") {
#   ## Read outcome data
#   data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
#
#   ## check that outcome is valid
#   valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
#   if (outcome %in% valid_outcomes == FALSE) {
#     stop("invalid outcome")
#   }
#
#
#   ## returns the col # based on outcome input
#   outcome_col <- if(outcome == "heart attack") {
#     11
#   } else if (outcome == "heart failure") {
#     17
#   } else if (outcome == "pneumonia") {
#     23
#   }
#
#   y <- as.numeric(data[,outcome_col])
#
#   ## sort data by state and outcome col and get rid of NA
#   data <- na.omit(data[order(data$State, y),])
#
#   ## for each state return the hospital with given rank (num)
#
#   answer <- split(data, data$State)
#   final <- lapply(answer, function(returnhospital) {returnhospital[num,2]})
#
#   ## Return hospital name in that state with the given rank
#   ## 30-day death rate
#
# }
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
