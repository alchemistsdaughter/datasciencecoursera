## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## Return hospital name in that state with lowest 30-day death
## rate
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
?grep
grep("NY", data$State)
subset(data, data$State== "NY")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col]==z)
answer <- finalsub[2]
}
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col]==z)
answer <- finalsub[2]
answer
}
best("MD", "heart attack")
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z)
answer <- finalsub[2]
answer
}
best("TX", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z)
answer <- finalsub[1, 2]
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
?subset
?na.last
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state, )
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(order(statesub[,outcome_col], na.last = NA))
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[1, 2]
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state, )
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- order(as.numeric(statesub[,outcome_col]), na.last = NA)
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[1, 2]
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state, )
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- order(as.numeric(statesub[,outcome_col]), na.last = NA)
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[2]
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state, )
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[2]
answer
}
best("MD", "heart attack")
best("TX", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- order(finalsub[1, 2], na.list = NA)
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- order(finalsub[2], na.list = NA)
answer
}
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[1]
answer
}
best("MD", "heart attack")
## returns a list of hospitals with the lowest 30 day
## mortality rate for heart attack, heart failure, or pneumonia
best <- function (state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
## check that state and outcome are valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data[, 7]) {
stop("invalid state input")
} else if (outcome %in% valid_outcomes == FALSE) {
stop("invalid outcome input")
}
## subset data based on selected state
statesub <- subset(data, data$State== state)
## Return hospital name in that state with lowest 30-day death
## rate
outcome_col <- if(outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else if (outcome == "pneumonia") {
23
} ## returns the col # based on outcome input
y <- as.numeric(statesub[,outcome_col])
z <- min(y, na.rm = TRUE)
finalsub <- subset(statesub, statesub[, outcome_col] %in% z) #subset of hospitals with loweset rate
answer <- finalsub[2]
answer
}
best("MD", "heart attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
?order
best("TX", "heart failure")
best("TX", "heart attack")
